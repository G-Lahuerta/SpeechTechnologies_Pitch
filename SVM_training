%% SVM TRAINING CODE
% A SVM is used to classify whether the fragment of speech is voiced or
% unvoiced. To do so, all the files in a database will be processed and
% analyzed according to the reference files.

%% PATH DEFINITION

files = dir('./.../*.wav');
files_ref = dir('./.../*.f0ref');

%% Computation of the total length of the features

preallocation = 0;

for i=1:1:length(files)
    text = textread(strcat('./.../',files_ref(i).name));
    preallocation = preallocation + length(text);    
end


%% PARAMETERS

W_L = 32;       % Set the window length in ms
S_I = 15;       % Set the sampling interval in ms

%% Method selector

autocorre = false;
cepstrum = true;

%% Feature definition
% The features that will be taken into account for the SVM are
% pre-initialized.

feature1 = zeros(preallocation +100,1 );
feature2 = zeros(preallocation +100,1 );
Labelref = zeros(preallocation +100,1 );

labelTurn = 0;

%% Iteration through the database

for i=1:1:length(files)
    display(strcat('file ', int2str(i), ' out of ', int2str(length(files))));
    [x, fs] = audioread(['./pitch/ST201701_pitch/data/fda_ue/',files(i).name]);
    %%%[x, fs] = audioread(['./PTDB/',files(i).name]);
    N_s = length(x);
    % W_L and S_I are converted into samples according to the sampling
    % frequency of the file.
    s_i = S_I * fs / 1000;
    w_l = W_L * fs / 1000;
    
    % We create a counter for control reasons
    
    counter = 0;
    labelTurn_start = labelTurn;
    % Iterate the different fragments of the signal
    for shift = -s_i:s_i:(N_s - s_i) 
        labelTurn = labelTurn + 1;
        start = shift + 1;
        finish = shift + w_l + 1;
        % Apply correction for frames that start or end outside the window
        if finish>N_s
            x_1 = [x(start:N_s); zeros((w_l - length(start:N_s)),1)];
        elseif start<0
            x_1 = [zeros((w_l - finish),1); x(1:finish)];
        else
            x_1 = x(start:finish);
        end
        
        % Obtention of feature 1: Zero crossings. This will be the same for
        % both classifiers.
        zx = 0;
        for j = 2:1:w_l
            if x_1(j)~=0
                if sign(x_1(j))~=sign(x_1(j-1))
                    zx = zx + 1;
                end
            end
        end
        feature1(labelTurn) = zx;
        
        % Here the autocorrelation and the cepstrum are computed according
        % to the defined method
        
        if autocorre
            C = autocorr(x_1, w_l-1);
        elseif cepstrum
            w = window(@hamming, length(x_1));
            x_1w = x_1.*w;
            x1_1 = log(abs(fft(x_1w)));
            x2_1 = ifft(x1_1);
            x3_1 = x2_1(1:floor(length(x2_1)/2));
            L = zeros(1, length(x3_1));
            L(30:length(L)) = 1;
            C = real(x3_1.*L');
        end
        
        % We compute the ratio in the autocorrelation as the second
        % feature
        if autocorre
            feature2(labelTurn) =  C(4)/C(1);
        
        % We compute the ratio between the highest and the fifth top value
        % of the cepstrum
        elseif cepstrum
            sorted = sort(C);
            sorted1 = sorted(length(sorted):-1:1);
            r = sorted1(15)/sorted1(1);
            %feature2 = [feature2; r];
            feature2(labelTurn) = r;
        end
        
       
        counter = counter + 1;
    end
    text = textread(strcat('./pitch/ST201701_pitch/data/fda_ue/',files_ref(i).name));
    for k = 1:1:counter
        if k<=length(text)
            Labelref(labelTurn_start + k) = sign(text(k));
        else
            Labelref(labelTurn_start + k) = 0;
        end
    end
end


SVM_classifier = svmtrain([feature1, feature2)], Labelref, 'ShowPlot', true)
        
